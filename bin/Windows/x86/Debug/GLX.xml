<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLX</name>
    </assembly>
    <members>
        <member name="T:GLX.Animations">
            <summary>
            Animation class. Holds all the animation data for a sprite.
            </summary>
        </member>
        <member name="F:GLX.Animations.spriteSheetInfo">
            <summary>
            The sprite sheet info
            </summary>
        </member>
        <member name="F:GLX.Animations.spriteSheets">
            <summary>
            The dictionary of sprite sheets keyed by the name given to the sheet
            </summary>
        </member>
        <member name="F:GLX.Animations.active">
            <summary>
            Is the animation active
            </summary>
        </member>
        <member name="F:GLX.Animations.elapsedTime">
            <summary>
            The time elapsed since we last changed frames. In ticks.
            </summary>
        </member>
        <member name="F:GLX.Animations.currentFrame">
            <summary>
            The current frame we are on. Zero based.
            </summary>
        </member>
        <member name="F:GLX.Animations.sourceRect">
            <summary>
            The sprite sheet source rectangle
            </summary>
        </member>
        <member name="F:GLX.Animations.gameTime">
            <summary>
            The game time the sprite exists in
            </summary>
        </member>
        <member name="F:GLX.Animations.currentSpriteSheet">
            <summary>
            The current sprite sheet
            </summary>
        </member>
        <member name="F:GLX.Animations.currentAnimationName">
            <summary>
            The current animation
            </summary>
        </member>
        <member name="P:GLX.Animations.CurrentAnimationName">
            <summary>
            The current animation.
            </summary>
            <remarks>When set we first check if the animation exists. If it does set it up.
            If it does not throw an exception.</remarks>
        </member>
        <member name="P:GLX.Animations.Item(System.String)">
            <summary>
            Indexer for adding new sprite sheets
            </summary>
            <param name="key">The name of the sprite sheet</param>
            <returns></returns>
        </member>
        <member name="M:GLX.Animations.#ctor(GLX.SpriteSheetInfo,GLX.GameTimeWrapper)">
            <summary>
            Create new animation storage
            </summary>
            <param name="spriteSheetInfo">The sprite sheet info for the animations</param>
            <param name="gameTime">The game time the sprite exists in</param>
        </member>
        <member name="M:GLX.Animations.ResetAnimation">
            <summary>
            Reset the animation to the beginning
            </summary>
        </member>
        <member name="M:GLX.HelperMethods.ToVector3(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a Vector3 from a Vector2 with 0 as its Z value
            </summary>
            <param name="vector">The Vector2</param>
            <returns>A Vector3</returns>
        </member>
        <member name="M:GLX.HelperMethods.IntersectPixels(Microsoft.Xna.Framework.Matrix,System.Int32,System.Int32,Microsoft.Xna.Framework.Color[],Microsoft.Xna.Framework.Matrix,System.Int32,System.Int32,Microsoft.Xna.Framework.Color[])">
            <summary>
            Determines if there is overlap of the non-transparent pixels between two
            sprites.
            </summary>
            <param name="transformA">World transform of the first sprite.</param>
            <param name="widthA">Width of the first sprite's texture.</param>
            <param name="heightA">Height of the first sprite's texture.</param>
            <param name="dataA">Pixel color data of the first sprite.</param>
            <param name="transformB">World transform of the second sprite.</param>
            <param name="widthB">Width of the second sprite's texture.</param>
            <param name="heightB">Height of the second sprite's texture.</param>
            <param name="dataB">Pixel color data of the second sprite.</param>
            <returns>True if non-transparent pixels overlap; false otherwise</returns>
        </member>
        <member name="M:GLX.Line.#ctor(Microsoft.Xna.Framework.GraphicsDeviceManager,GLX.Line.Type,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Define a line
            </summary>
            <param name="graphics">The graphics device manager</param>
            <param name="type">How you are defining the second point, point or vector</param>
            <param name="p1">The starting point</param>
            <param name="p2">The ending point if using Point or the direction the line should
            go in if using Vector.</param>
            <param name="thickness">The thickness of the line</param>
        </member>
        <member name="T:GLX.Particle">
            <summary>
            Particles!
            </summary>
        </member>
        <member name="F:GLX.Particle.aliveTime">
            <summary>
            How long the particle will stay alive before despawning
            </summary>
        </member>
        <member name="F:GLX.Particle.startingColor">
            <summary>
            The initial color of the particle
            </summary>
        </member>
        <member name="F:GLX.Particle.endingColor">
            <summary>
            The color the particle should change to from the starting color
            </summary>
        </member>
        <member name="F:GLX.Particle.colorShiftRate">
            <summary>
            The rate at which the particle will change from the starting color to the ending color
            </summary>
        </member>
        <member name="F:GLX.Particle.colorShiftValue">
            <summary>
            How far along the particle is in shifting colors
            </summary>
        </member>
        <member name="F:GLX.Particle.velocityDecayRate">
            <summary>
            The rate at which the particle should slow down
            </summary>
        </member>
        <member name="F:GLX.Particle.fadeRate">
            <summary>
            The rate at which the particle should fade and then despawn
            </summary>
        </member>
        <member name="F:GLX.Particle.gravity">
            <summary>
            The rate of gravity on the particle
            </summary>
        </member>
        <member name="F:GLX.Particle.hasGravity">
            <summary>
            If the particle has gravity
            </summary>
        </member>
        <member name="F:GLX.Particle.bounce">
            <summary>
            The amount the particle should bounce
            </summary>
        </member>
        <member name="F:GLX.Particle.useDrawRect">
            <summary>
            If the particle was loaded from a texture or just a pixel
            </summary>
        </member>
        <member name="M:GLX.Particle.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Create a particle using a texture
            </summary>
            <param name="loadedTex">The particle texture</param>
        </member>
        <member name="M:GLX.Particle.#ctor(Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>
            Create a particle using a pixel
            </summary>
            <param name="graphics">The graphics device manager</param>
        </member>
        <member name="M:GLX.Particle.SpawnParticle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Tuple{System.Int32,System.Int32},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Boolean,System.Single,System.Single)">
            <summary>
            Spawn a new particle, use if particle was loaded with a texture
            </summary>
            <param name="position">The initial position of the particle</param>
            <param name="color">The initial color of the particle</param>
            <param name="aliveTime">The minimum and maximum alive time of the particle, in milliseconds</param>
            <param name="velocity">The minimum and maximum initial velocity of the particle</param>
            <param name="velocityDecayRate">The minimum and maximum velocity decay rate. 0 = instant velocity decay. 1 = no velocity decay</param>
            <param name="fadeRate">The minimum and maximum fade to despawn rate. 0 = no fade. 1 = instant fade.</param>
            <param name="colorShiftRate">The minimum and maximum color shift rate. 0 = no shift. 1 = instant shift</param>
            <param name="rotation">The initial direction the particle should fire in. In degrees.</param>
            <param name="spread">The deviation in either direction from the rotation. In degrees.</param>
            <param name="fadeTo">The ending color of the particle</param>
            <param name="hasGravity">If the particle has gravity applied to it</param>
            <param name="bounce">How much the particle bounces</param>
            <param name="gravity">If the particle has gravity how much force should be applied</param>
            <returns>If the particle was spawned returns true</returns>
        </member>
        <member name="M:GLX.Particle.SpawnParticle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Tuple{System.Int32,System.Int32},System.Tuple{System.Int32,System.Int32},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Tuple{System.Single,System.Single},System.Single,System.Int32,Microsoft.Xna.Framework.Color,System.Boolean,System.Single,System.Single)">
            <summary>
            Spawn a particle, use if particle was loaded with a pixel
            </summary>
            <param name="position">The initial position of the particle</param>
            <param name="color">The initial color of the particle</param>
            <param name="aliveTime">The minimum and maximum alive time of the particle, in milliseconds</param>
            <param name="size">The width and height of the particle</param>
            <param name="velocity">The minimum and maximum initial velocity of the particle</param>
            <param name="velocityDecayRate">The minimum and maximum velocity decay rate. 0 = instant velocity decay. 1 = no velocity decay</param>
            <param name="fadeRate">The minimum and maximum fade to despawn rate. 0 = no fade. 1 = instant fade.</param>
            <param name="colorShiftRate">The minimum and maximum color shift rate. 0 = no shift. 1 = instant shift</param>
            <param name="rotation">The initial direction the particle should fire in. In degrees.</param>
            <param name="spread">The deviation in either direction from the rotation. In degrees.</param>
            <param name="fadeTo">The ending color of the particle</param>
            <param name="hasGravity">If the particle has gravity applied to it</param>
            <param name="bounce">How much the particle bounces</param>
            <param name="gravity">If the particle has gravity how much force should be applied</param>
            <returns>If the particle was spawned returns true</returns>
        </member>
        <member name="M:GLX.Particle.Update(GLX.GameTimeWrapper)">
            <summary>
            Updates the particle
            </summary>
            <param name="gameTime">The game time the particle exists in</param>
            <param name="graphics">The graphics device manager</param>
        </member>
        <member name="M:GLX.Particle.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draw the particle
            </summary>
            <param name="spriteBatch">The sprite batch</param>
        </member>
        <member name="M:GLX.Particle.RandomBetween(System.Single,System.Single)">
            <summary>
            Gets a random value between two floats. The minimum number can also be negative!
            </summary>
            <param name="min">The smallest number you could get</param>
            <param name="max">The largest number you could get, not inclusive</param>
            <returns>Returns a random number of type float.</returns>
        </member>
        <member name="M:GLX.Polygon.AddSide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a side using the specified positions
            </summary>
            <param name="p1">Position 1</param>
            <param name="p2">Position 2</param>
        </member>
        <member name="M:GLX.Polygon.AddSide(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a side using the last side defined and a specified position
            </summary>
            <param name="pos">Position 2</param>
        </member>
        <member name="M:GLX.Polygon.AddSide">
            <summary>
            Adds a side connecting the last side defined and the first side defined
            </summary>
        </member>
        <member name="T:GLX.Sprite">
            <summary>
            Sprite class
            </summary>
        </member>
        <member name="F:GLX.Sprite.tex">
            <summary>
            Sprite texture
            </summary>
        </member>
        <member name="F:GLX.Sprite.drawRect">
            <summary>
            Sprite draw rectangle
            </summary>
        </member>
        <member name="F:GLX.Sprite.colorData">
            <summary>
            Texture color data
            </summary>
        </member>
        <member name="F:GLX.Sprite.spriteTransform">
            <summary>
            Sprite transform. Used when sprite is rotated and/or scaled
            </summary>
        </member>
        <member name="F:GLX.Sprite.animations">
            <summary>
            Sprite animation data
            </summary>
        </member>
        <member name="F:GLX.Sprite.isAnimated">
            <summary>
            Does the sprite have animations
            </summary>
        </member>
        <member name="F:GLX.Sprite.ready">
            <summary>
            If the sprite should have animations have they been loaded in and are
            we ready to use them?
            </summary>
        </member>
        <member name="M:GLX.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a new sprite with the loaded texture
            </summary>
            <param name="loadedTex">The texture loaded from the Content manager</param>
        </member>
        <member name="M:GLX.Sprite.#ctor(Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>
            Creates a new sprite that has a 1 by 1 white pixel as its texture
            </summary>
            <remarks>This pixel can be resized using <see cref="F:GLX.Sprite.drawRect"/></remarks>
            <param name="graphics">Graphics device manager for game</param>
        </member>
        <member name="M:GLX.Sprite.#ctor(GLX.SpriteSheetInfo,GLX.GameTimeWrapper,Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>
            Creates an animatable Sprite that is not ready to use
            In order to use this sprite you need to add sprite sheets
            Then call <code>Ready</code>
            </summary>
            <param name="spriteSheetInfo">The sprite sheet info</param>
            <param name="gameTime">The game time the sprite will exist in</param>
        </member>
        <member name="M:GLX.Sprite.Ready">
            <summary>
            Sets up an animated Sprite so that it is ready to be used
            </summary>
            <remarks>Sets the texture as the first </remarks>
        </member>
        <member name="M:GLX.Sprite.Update(GLX.GameTimeWrapper)">
            <summary>
            Updates the sprite
            </summary>
            <param name="gameTime">The game time the sprite exists in</param>
        </member>
        <member name="M:GLX.Sprite.UpdateAnimation(GLX.GameTimeWrapper)">
            <summary>
            Updates the sprite animation
            </summary>
            <param name="gameTime">The game time the sprite exists in</param>
        </member>
        <member name="M:GLX.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the sprite
            </summary>
            <param name="spriteBatch">The sprite batch</param>
        </member>
        <member name="M:GLX.Sprite.DrawRect(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the sprite using its draw rectangle
            </summary>
            <param name="spriteBatch">The sprite batch</param>
        </member>
        <member name="M:GLX.Sprite.UpdateTexAndColorData(GLX.SpriteSheet,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Updates the texture field and color data information with the frame we are on in the animation
            </summary>
            <param name="spriteSheet">The sprite sheet we are using</param>
            <param name="graphicsDevice">The graphics device</param>
        </member>
        <member name="M:GLX.Sprite.CalculateBoundingRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Used for pixel perfect collision.
            </summary>
            <param name="rectangle">The current bounding rectangle</param>
            <param name="transform">The current sprite transform matrix</param>
            <returns>Returns a new bounding rectangle</returns>
        </member>
        <member name="T:GLX.SpriteBase">
            <summary>
            The SpriteBase class is the base class for all 2D drawable objects (sprites)
            This is an abstract class that contains a bunch of fields common to 2D drawable
            objects.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.position">
            <summary>
            Stores the position of the sprite.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.velocity">
            <summary>
            Stores the velocity of the sprite.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.visible">
            <summary>
            Stores whether or not the sprite is visible.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.rectangle">
            <summary>
            Stores the bounding rectangle of the sprite.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.color">
            <summary>
            Stores the color of the sprite.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.origin">
            <summary>
            Stores the origin of the sprite.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.alpha">
            <summary>
            Stores the sprite's transparancy value.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.rotation">
            <summary>
            Stores the rotation of Sprite in degrees.
            </summary>
        </member>
        <member name="F:GLX.SpriteBase.scale">
            <summary>
            Stores the scale of the sprite.
            </summary>
        </member>
        <member name="M:GLX.SpriteBase.#ctor">
            <summary>
            Creates a new instance of a sprite.
            </summary>
        </member>
        <member name="M:GLX.SpriteBase.Update">
            <summary>
            Base Update method. Should be overridden in almost all situations.
            </summary>
        </member>
        <member name="M:GLX.SpriteBase.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Abstract Draw method.
            </summary>
            <param name="spriteBatch">SpriteBatch for Game</param>
        </member>
        <member name="T:GLX.SpriteBase.MovementDirection">
            <summary>
            A movement direction, used for basic key inputs
            </summary>
        </member>
        <member name="M:GLX.SpriteBase.Move(Microsoft.Xna.Framework.Input.KeyboardState,System.Single,GLX.SpriteBase.MovementDirection,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Handles basic sprite movement
            </summary>
            <param name="keyboardState">Current keyboard state</param>
            <param name="speed">Speed you want the sprite to move at</param>
            <param name="movementDirection">Direction you want the sprite to move in</param>
            <param name="key">Key you want to associate with that direction</param>
        </member>
        <member name="M:GLX.SpriteBase.Aim(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Rotates a sprite so that it is facing a certain position
            </summary>
            <param name="targetPosition">The position the sprite should point to</param>
        </member>
        <member name="M:GLX.SpriteBase.Aim(Microsoft.Xna.Framework.Input.MouseState,GLX.Camera)">
            <summary>
            Rotates a sprite so that it faces the cursor
            </summary>
            <param name="mouseState">The mouse state</param>
            <param name="world">The current world</param>
            <remarks>We use the current world's camera to transform the mouse to the
            correct position on the screen.</remarks>
        </member>
        <member name="M:GLX.SpriteBase.Aim(Microsoft.Xna.Framework.Input.GamePadState,GLX.SpriteBase.ThumbStick)">
            <summary>
            Rotates a sprite so that it points in the direction the player is pointing
            their thumbstick
            </summary>
            <param name="gamePadState">The game pad state</param>
            <param name="thumbStick">The thumbstick the player is using for aiming</param>
        </member>
    </members>
</doc>
